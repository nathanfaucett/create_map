(function(dependencies, global) {
    var cache = [];

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module !== undefined) {
            return module.exports;
        } else {
            callback = dependencies[index];
            exports = {};

            cache[index] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
            return module.exports;
        }
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {

        require(0);

    }
}([
    function(require, exports, module, global) {

        global.createMap = require(1);


        global.map = createMap();


        var nan = NaN,
            object = {},
            array = [],
            number = 10;

        map.set(nan, "NaN");
        map.set(object, "{}");
        map.set(array, "[]");
        map.set(number, "10");

        console.log(
            map.get(nan),
            map.get(object),
            map.get(array),
            map.get(number)
        );


    },
    function(require, exports, module, global) {

        var isEqual = require(2);


        module.exports = createMap;


        function createMap() {
            var keys = [],
                values = [];

            return {
                get: function(key) {
                    return getValue(key, keys, values);
                },
                set: function(key, value) {
                    var index = getIndex(key, keys);

                    if (index !== -1) {
                        values[index] = value;
                    } else {
                        index = keys.length;

                        keys[index] = key;
                        values[index] = value;
                    }
                },
                has: function(key) {
                    return getIndex(key, keys) !== -1;
                },
                remove: function(key) {
                    var index = getIndex(key, keys);

                    if (index !== -1) {
                        keys.splice(index, 1);
                        values.splice(index, 1);

                        return true;
                    }

                    return false;
                },
                keys: function() {
                    return keys.slice();
                },
                values: function() {
                    return values.slice();
                },
                key: function(index) {

                    return keys[index];
                },
                value: function(index) {

                    return getValue(keys[index], keys, values);
                },
                size: function() {
                    return keys.length;
                },
                clear: function() {
                    keys.length = 0;
                    values.length = 0;
                }
            };
        }

        function getValue(key, keys, values) {
            var index = getIndex(key, keys);

            return index !== -1 ? values[index] : undefined;
        }

        function getIndex(key, keys) {
            var i = keys.length;

            while (i--) {
                if (isEqual(key, keys[i])) {
                    return i;
                }
            }

            return -1;
        }


    },
    function(require, exports, module, global) {

        module.exports = function isEqual(a, b) {
            return !(a !== b && !(a !== a && b !== b));
        };


    }
], (new Function("return this;"))()));
